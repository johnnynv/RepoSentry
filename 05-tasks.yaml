# RepoSentry Bootstrap Tasks
# File: 05-tasks.yaml
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-clone
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Clone user repository for Bootstrap Pipeline"
  params:
  - name: url
    type: string
    description: "Repository URL to clone"
  - name: revision
    type: string
    description: "Git revision to checkout"
    default: "main"
  workspaces:
  - name: output
    description: "The workspace where the repo will be cloned"
  steps:
  - name: clone
    image: alpine/git:latest
    script: |
      set -e
      echo "Cloning repository: $(params.url)"
      echo "Revision: $(params.revision)"
      git clone "$(params.url)" "$(workspaces.output.path)/"
      cd "$(workspaces.output.path)/"
      git checkout "$(params.revision)"
      echo "Repository cloned successfully"
      ls -la "$(workspaces.output.path)/"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-compute-namespace
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Compute target namespace name from repository URL"
  params:
  - name: repo-url
    type: string
    description: "Repository URL"
  - name: repo-full-name
    type: string
    description: "Repository full name (org/repo)"
  results:
  - name: namespace-name
    description: "Computed namespace name"
  steps:
  - name: compute
    image: bitnami/kubectl:1.28
    script: |
      set -e
      REPO_FULL_NAME="$(params.repo-full-name)"
      # Convert org/repo to reposentry-org-repo format
      REPO_PATH=$(echo "$REPO_FULL_NAME" | tr '/' '-')
      NAMESPACE_NAME="reposentry-$REPO_PATH"
      # Ensure namespace name is valid (max 63 chars, lowercase, alphanumeric + hyphens)
      NAMESPACE_NAME=$(echo "$NAMESPACE_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-63)
      echo -n "$NAMESPACE_NAME" | tee $(results.namespace-name.path)
      echo "Computed namespace: $NAMESPACE_NAME (from $REPO_FULL_NAME)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-validate
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Validate Tekton resources in user repository"
  params:
  - name: tekton-path
    type: string
    description: "Path to Tekton resources"
    default: ".tekton"
  - name: target-namespace
    type: string
    description: "Target namespace for validation"
  workspaces:
  - name: source
    description: "Source code workspace"
  steps:
  - name: validate
    image: bitnami/kubectl:1.28
    script: |
      set -e
      TEKTON_PATH="$(workspaces.source.path)/$(params.tekton-path)"
      OUTPUT_PATH="$(workspaces.source.path)/processed-tekton-resources"
      
      echo "Checking Tekton directory: $TEKTON_PATH"
      ls -la "$(workspaces.source.path)/"
      
      if [ ! -d "$TEKTON_PATH" ]; then
        echo "No Tekton directory found at $TEKTON_PATH"
        exit 1
      fi
      
      echo "Found Tekton directory. Contents:"
      ls -la "$TEKTON_PATH"
      
      echo "Validating Tekton resources in $TEKTON_PATH"
      
      mkdir -p "$OUTPUT_PATH"
      find "$TEKTON_PATH" -name "*.yaml" -o -name "*.yml" | while read file; do
        echo "Processing $file"
        
        output_file="$OUTPUT_PATH/$(basename "$file")"
        
        if command -v yq > /dev/null 2>&1; then
          yq 'del(.metadata.namespace)' "$file" > "$output_file"
        else
          sed '/^[[:space:]]*namespace:[[:space:]]/d' "$file" > "$output_file"
        fi
        
        echo "Processed YAML (namespace removed):"
        cat "$output_file"
        echo "--- End of processed $file ---"
        
        kubectl --dry-run=client apply -f "$output_file" --namespace="$(params.target-namespace)"
        
        echo "✅ $file validated and processed successfully"
      done
      
      echo "Validation completed successfully"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-ensure-namespace
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Ensure user namespace exists with proper RBAC and quotas"
  params:
  - name: namespace-name
    type: string
    description: "Namespace name to create"
  - name: repo-url
    type: string
    description: "Repository URL for labeling"
  steps:
  - name: ensure-namespace
    image: bitnami/kubectl:1.28
    script: |
      set -e
      NAMESPACE="$(params.namespace-name)"
      REPO_URL="$(params.repo-url)"
      
      echo "Ensuring namespace $NAMESPACE exists"
      
      kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
      
      kubectl label namespace "$NAMESPACE" reposentry.io/managed=true --overwrite
      
      kubectl annotate namespace "$NAMESPACE" \
        reposentry.io/repository="$REPO_URL" \
        reposentry.io/created-by="bootstrap-pipeline" \
        --overwrite
      
      echo "Namespace $NAMESPACE is ready"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-apply
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Apply user Tekton Pipeline and Task definitions"
  params:
  - name: target-namespace
    type: string
    description: "Target namespace for resources"
  workspaces:
  - name: resources
    description: "Validated Tekton resources workspace"
  results:
  - name: pipeline-name
    description: "Name of the applied Pipeline"
  steps:
  - name: apply-resources
    image: bitnami/kubectl:1.28
    script: |
      set -e
      TARGET_NS="$(params.target-namespace)"
      RESOURCES_PATH="$(workspaces.resources.path)/processed-tekton-resources"
      
      echo "📋 Applying Tekton Pipeline and Task definitions to namespace $TARGET_NS"
      echo ""
      
      find "$RESOURCES_PATH" -name "*.yaml" -o -name "*.yml" | while read file; do
        if ! grep -q "kind: PipelineRun" "$file"; then
          echo "✅ Processing $(basename "$file")"
          
          # Create a temporary file with corrected namespace
          TEMP_FILE="/tmp/$(basename "$file")"
          
          # Copy file and remove any existing namespace fields
          if grep -q "namespace:" "$file"; then
            echo "   🔧 Removing namespace fields (will use --namespace=$TARGET_NS)"
            # Remove all namespace lines to avoid conflicts
            sed '/namespace:/d' "$file" > "$TEMP_FILE"
          else
            echo "   📝 No namespace field found, copying as-is"
            cp "$file" "$TEMP_FILE"
          fi
          
          echo "   📋 Applying to namespace $TARGET_NS"
          kubectl apply -f "$TEMP_FILE" --namespace="$TARGET_NS"
          
          # Clean up temp file
          rm -f "$TEMP_FILE"
        else
          echo "⏭️  Skipping PipelineRun file: $(basename "$file") (will be created dynamically)"
        fi
      done
      
      echo ""
      echo "✅ Pipeline and Task resources applied successfully"
      
      PIPELINE_NAME=$(kubectl get pipelines -n "$TARGET_NS" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
      
      if [ -n "$PIPELINE_NAME" ]; then
        echo "🎯 Found Pipeline: $PIPELINE_NAME"
        echo -n "$PIPELINE_NAME" > "$(results.pipeline-name.path)"
      else
        echo "⚠️  No Pipeline found in namespace $TARGET_NS"
        echo -n "" > "$(results.pipeline-name.path)"
      fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-run
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Create and trigger user Pipeline execution with dynamic workspace binding"
  params:
  - name: target-namespace
    type: string
  - name: pipeline-name
    type: string
  - name: repo-url
    type: string
  - name: repo-branch
    type: string
  - name: commit-sha
    type: string
  steps:
  - name: create-pipelinerun
    image: bitnami/kubectl:1.28
    script: |
      #!/bin/bash
      set -e
      NAMESPACE="$(params.target-namespace)"
      PIPELINE="$(params.pipeline-name)"
      REPO_URL="$(params.repo-url)"
      REPO_BRANCH="$(params.repo-branch)"
      COMMIT_SHA="$(params.commit-sha)"
      SHORT_SHA=$(echo "$COMMIT_SHA" | cut -c1-8)
      TIMESTAMP=$(date +%s)
      
      PIPELINERUN_NAME="${PIPELINE}-auto-${TIMESTAMP}"
      
      echo "🚀 Creating PipelineRun in namespace $NAMESPACE"
      echo "Pipeline: $PIPELINE"
      echo "Repository: $REPO_URL"
      echo "Branch: $REPO_BRANCH"
      echo "Commit: $COMMIT_SHA"
      echo ""
      
      # Dynamic workspace detection and binding
      echo "📋 Detecting Pipeline workspace requirements..."
      WORKSPACES=$(kubectl get pipeline $PIPELINE -n $NAMESPACE -o jsonpath='{.spec.workspaces[*].name}' 2>/dev/null || echo "")
      
      if [ -n "$WORKSPACES" ]; then
        echo "🔧 Pipeline requires workspaces: $WORKSPACES"
        echo "   Creating PipelineRun with dynamic workspace bindings (5Gi each)..."
        
        # Generate workspace bindings dynamically
        WORKSPACE_BINDINGS=""
        for ws in $WORKSPACES; do
          WORKSPACE_BINDINGS="$WORKSPACE_BINDINGS
  - name: $ws
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi"
        done
        
        # Create PipelineRun with dynamic workspaces
        cat <<EOF | kubectl create -f -
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: $PIPELINERUN_NAME
  namespace: $NAMESPACE
  labels:
    reposentry.io/triggered-by: "bootstrap-pipeline"
    reposentry.io/commit-sha: "$SHORT_SHA"
    tekton.dev/pipeline: "$PIPELINE"
  annotations:
    reposentry.io/repository-url: "$REPO_URL"
    reposentry.io/source-branch: "$REPO_BRANCH"
    reposentry.io/commit-sha: "$COMMIT_SHA"
    reposentry.io/workspace-capacity: "5Gi"
spec:
  pipelineRef:
    name: $PIPELINE
  params:
  - name: git-url
    value: "$REPO_URL"
  - name: git-revision
    value: "$COMMIT_SHA"
  - name: git-short-sha
    value: "$SHORT_SHA"
  workspaces:$WORKSPACE_BINDINGS
EOF
      else
        echo "✅ Pipeline requires no workspaces"
        
        # Create PipelineRun without workspaces
        cat <<EOF | kubectl create -f -
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: $PIPELINERUN_NAME
  namespace: $NAMESPACE
  labels:
    reposentry.io/triggered-by: "bootstrap-pipeline"
    reposentry.io/commit-sha: "$SHORT_SHA"
    tekton.dev/pipeline: "$PIPELINE"
  annotations:
    reposentry.io/repository-url: "$REPO_URL"
    reposentry.io/source-branch: "$REPO_BRANCH"
    reposentry.io/commit-sha: "$COMMIT_SHA"
spec:
  pipelineRef:
    name: $PIPELINE
  params:
  - name: git-url
    value: "$REPO_URL"
  - name: git-revision
    value: "$COMMIT_SHA"
  - name: git-short-sha
    value: "$SHORT_SHA"
EOF
      fi
      
      echo ""
      echo "✅ PipelineRun created successfully!"
      echo "🔗 View in Tekton Dashboard:"
      echo "   http://tekton.10.78.14.61.nip.io/#/namespaces/$NAMESPACE/pipelineruns/$PIPELINERUN_NAME"
      echo ""
      echo "📊 Monitor progress:"
      echo "   kubectl get pipelinerun $PIPELINERUN_NAME -n $NAMESPACE"
      echo "   kubectl logs pipelinerun/$PIPELINERUN_NAME -n $NAMESPACE -f"
      echo ""
      if [ -n "$WORKSPACES" ]; then
        echo "💾 Workspace configuration:"
        echo "   Detected workspaces: $WORKSPACES"
        echo "   Capacity per workspace: 5Gi"
        echo "   Storage class: default (local-path)"
      fi
---
