apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pytest-task
  namespace: reposentry-demo
spec:
  description: Run pytest tests for the project
  # Template for all steps (reduces repetition)
  stepTemplate:
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      runAsNonRoot: true
      runAsUser: 65532
      seccompProfile:
        type: RuntimeDefault
  params:
    - name: git-url
      type: string
      description: Git repository URL
    - name: git-revision
      type: string
      description: Git revision to checkout
      default: main
  workspaces:
    - name: source
      description: The workspace containing the source code
  steps:
    - name: git-clone
      image: alpine/git:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e
        echo "Preparing workspace and cloning repository $(params.git-url) at revision $(params.git-revision)"
        
        # Create a dedicated project directory to avoid conflicts with shared PVC
        PROJECT_DIR="tekton-complete-poc"
        echo "Creating dedicated project directory: $PROJECT_DIR"
        
        # Clean and create project directory
        rm -rf "$PROJECT_DIR" 2>/dev/null || true
        mkdir -p "$PROJECT_DIR"
        cd "$PROJECT_DIR"
        
        echo "Working in project directory: $(pwd)"
        ls -la
        
        # Create a temporary directory for git config to avoid cross-device link issues
        export HOME=/tmp/git-home-$$
        mkdir -p $HOME
        
        # Set git config to avoid ownership issues  
        git config --global --add safe.directory '*'
        git config --global init.defaultBranch main
        git config --global user.email "tekton@example.com"
        git config --global user.name "Tekton CI"
        
        # Clone the repository
        echo "Cloning repository..."
        git clone $(params.git-url) .
        
        # Checkout specific revision if not main
        if [ "$(params.git-revision)" != "main" ]; then
          echo "Checking out revision $(params.git-revision)..."
          git checkout $(params.git-revision)
        fi
        
        echo "Repository cloned successfully"
        echo "Current directory contents:"
        ls -la
        echo "Git status:"
        git status --short || true
    
    - name: run-python-tests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        
        # Change to project directory inside the script
        cd tekton-complete-poc
        echo "Running Python tests in project directory: $(pwd)"
        
        # Verify we're in the right place
        ls -la
        
        # Install dependencies once (with proper permissions for restricted user)
        echo "Installing Python dependencies..."
        
        # Set up a writable pip target directory
        export PYTHONUSERBASE=/workspace/source/tekton-complete-poc/.local
        mkdir -p $PYTHONUSERBASE
        export PATH=$PYTHONUSERBASE/bin:$PATH
        
        # Install with user target to our writable workspace
        pip install --user --break-system-packages -r requirements.txt
        echo "Dependencies installed successfully to $PYTHONUSERBASE"
        
        # Create reports directory
        mkdir -p reports
        
        # Run all tests with HTML and coverage reports
        echo "Running all pytest tests with reports..."
        python -m pytest tests/ -v --tb=short \
          --html=reports/pytest-report.html --self-contained-html \
          --cov=src --cov-report=html:reports/coverage-html \
          --cov-report=xml:reports/coverage.xml \
          --cov-report=term-missing
        echo "All tests completed successfully"
        
        # Run smoke tests
        echo "Running smoke tests with -m marker..."
        python -m pytest tests/ -v --tb=short -m smoke \
          --html=reports/smoke-tests.html --self-contained-html
        echo "Smoke tests completed successfully"
        
        # Run main program
        echo "Running main program..."
        python main.py > reports/main-output.log 2>&1
        echo "Main program executed successfully"
        
        # Generate test summary
        echo "=== TEST SUMMARY ===" > reports/summary.txt
        echo "Generated at: $(date)" >> reports/summary.txt
        echo "Git SHA: $(params.git-revision)" >> reports/summary.txt
        echo "Repository: $(params.git-url)" >> reports/summary.txt
        echo "" >> reports/summary.txt
        
        # Count test results (approximate)
        TOTAL_TESTS=$(grep -o "test session starts" reports/pytest-report.html | wc -l)
        echo "Test execution completed. Check reports/ directory for details." >> reports/summary.txt
        ls -la reports/ >> reports/summary.txt
    
    - name: prepare-test-reports
      image: busybox:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e
        
        # Change to project directory
        cd tekton-complete-poc
        echo "📊 Preparing Test Reports Summary in: $(pwd)"
        
        # Create a simple index page with links to all reports
        cat > reports/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Pytest Test Reports - Tekton POC</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                .section { margin: 20px 0; padding: 15px; background: #ecf0f1; border-radius: 5px; }
                .section h3 { color: #27ae60; margin-top: 0; }
                a { color: #3498db; text-decoration: none; font-weight: bold; }
                a:hover { text-decoration: underline; }
                .download-section { background: #fff3cd; border-left: 4px solid #ffc107; }
                .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
                .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
                ul { list-style-type: none; padding: 0; }
                li { margin: 8px 0; padding: 8px; background: white; border-radius: 3px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🧪 Pytest Test Reports - Tekton POC</h1>
                
                <div class="section">
                    <h3>📊 Test Reports</h3>
                    <ul>
                        <li>📈 <a href="pytest-report.html">Full Test Report (HTML)</a> - Complete test results with details</li>
                        <li>💨 <a href="smoke-tests.html">Smoke Tests Report</a> - Critical functionality tests</li>
                        <li>📋 <a href="coverage-html/index.html">Code Coverage Report</a> - Line-by-line coverage analysis</li>
                        <li>📄 <a href="summary.txt">Test Summary</a> - Quick overview and logs</li>
                    </ul>
                </div>
                
                <div class="section download-section">
                    <h3>⬇️ Download Artifacts</h3>
                    <ul>
                        <li>📁 <a href="coverage.xml">Coverage XML</a> - Machine-readable coverage data</li>
                        <li>📜 <a href="main-output.log">Application Output Log</a> - Main program execution log</li>
                        <li>📊 <a href="summary.txt">Summary Text File</a> - Test execution summary</li>
                    </ul>
                </div>
                
                <div class="status success">
                    <strong>✅ Test Execution Completed!</strong><br>
                    Pipeline: pytest-pipeline | Namespace: tekton-pipelines<br>
                    Git SHA: Check summary.txt for details
                </div>
                
                <div class="section">
                    <h3>🔗 Quick Links</h3>
                    <ul>
                        <li>🏠 <a href="http://tekton.10.117.3.193.nip.io">Tekton Dashboard</a></li>
                        <li>📱 <a href="https://github.com/johnnynv/tekton-poc">GitHub Repository</a></li>
                    </ul>
                </div>
                
                <div class="section">
                    <h3>ℹ️ Access Instructions</h3>
                    <p><strong>Note:</strong> To view these reports, you'll need to:</p>
                    <ol>
                        <li>Copy reports from the PipelineRun workspace</li>
                        <li>Or check the Tekton logs for detailed results</li>
                        <li>Or use <code>kubectl port-forward</code> to access the workspace</li>
                    </ol>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        echo "✅ Test Reports prepared successfully!"
        echo "📋 Available report files:"
        ls -la reports/
        echo ""
        echo "📊 Report Summary:"
        if [ -f reports/summary.txt ]; then
          cat reports/summary.txt
        fi
    
    - name: upload-to-web-server
      image: busybox:latest
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e
        
        # Change to project directory
        cd tekton-complete-poc
        echo "🌐 Uploading reports to Web server from: $(pwd)"
        
        # Get pipeline info
        SHORT_SHA=$(echo "$(params.git-revision)" | cut -c1-8)
        FULL_SHA="$(params.git-revision)"
        PIPELINE_DIR="pytest-run-$SHORT_SHA"
        TARGET_DIR="/shared-reports/$PIPELINE_DIR"
        
        echo "📁 Creating target directory: $TARGET_DIR"
        mkdir -p "$TARGET_DIR"
        
        echo "📤 Copying reports..."
        cp -r reports/* "$TARGET_DIR/"
        
        # Extract test statistics from pytest report
        TOTAL_TESTS=0
        PASSED_TESTS=0
        FAILED_TESTS=0
        COVERAGE_PERCENT="0%"
        
        if [ -f "$TARGET_DIR/pytest-report.html" ]; then
          # Extract basic stats (simplified parsing)
          TOTAL_TESTS=$(grep -o "[0-9]\+ passed" "$TARGET_DIR/pytest-report.html" | head -1 | grep -o "[0-9]\+" || echo "0")
          PASSED_TESTS=$TOTAL_TESTS
          
          # Try to get coverage percentage
          if [ -f "$TARGET_DIR/coverage.xml" ]; then
            COVERAGE_PERCENT=$(grep -o 'line-rate="[0-9.]*"' "$TARGET_DIR/coverage.xml" | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}' || echo "0%")
          fi
        fi
        
        # Create pipeline metadata JSON
        cat > "$TARGET_DIR/metadata.json" << EOF
        {
          "pipeline_name": "$PIPELINE_DIR",
          "short_sha": "$SHORT_SHA", 
          "full_sha": "$FULL_SHA",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "stats": {
            "total_tests": $TOTAL_TESTS,
            "passed_tests": $PASSED_TESTS,
            "failed_tests": $FAILED_TESTS,
            "coverage_percent": "$COVERAGE_PERCENT"
          },
          "reports": {
            "pytest_report": "pytest-report.html",
            "smoke_tests": "smoke-tests.html", 
            "coverage_html": "coverage-html/index.html",
            "coverage_xml": "coverage.xml",
            "summary": "summary.txt"
          }
        }
        EOF
        
        echo "📊 Updating main index page..."
        # Create/update main index page
        cat > "/shared-reports/index.html" << 'MAIN_EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Tekton POC - Test Results Dashboard</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; margin: 0; background: #f8f9fa; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px 0; text-align: center; }
                .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                .pipeline-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }
                .pipeline-card { background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 20px; transition: transform 0.2s; }
                .pipeline-card:hover { transform: translateY(-2px); box-shadow: 0 4px 16px rgba(0,0,0,0.15); }
                .pipeline-title { font-size: 18px; font-weight: bold; color: #2c3e50; margin-bottom: 10px; }
                .pipeline-meta { color: #666; font-size: 14px; margin-bottom: 15px; }
                .stats-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px; }
                .stat-item { text-align: center; padding: 8px; background: #f8f9fa; border-radius: 4px; }
                .stat-value { font-size: 20px; font-weight: bold; color: #27ae60; }
                .stat-label { font-size: 12px; color: #666; }
                .coverage { color: #3498db; }
                .failed { color: #e74c3c; }
                .links { display: flex; gap: 10px; flex-wrap: wrap; }
                .btn { padding: 8px 12px; border-radius: 4px; text-decoration: none; font-size: 12px; font-weight: bold; }
                .btn-primary { background: #3498db; color: white; }
                .btn-success { background: #27ae60; color: white; }
                .btn-info { background: #17a2b8; color: white; }
                .no-pipelines { text-align: center; color: #666; font-style: italic; margin: 40px 0; }
                .refresh-note { text-align: center; color: #666; font-size: 14px; margin-top: 20px; }
            </style>
            <script>
                async function loadPipelines() {
                    try {
                        const response = await fetch('/api/pipelines');
                        const pipelines = await response.json();
                        displayPipelines(pipelines);
                    } catch (error) {
                        console.log('Using static content - API not available');
                        // Fallback to static directory listing if API not available
                    }
                }
                
                function displayPipelines(pipelines) {
                    // This would be populated by the API or manual updates
                }
            </script>
        </head>
        <body>
            <div class="header">
                <h1>🧪 Tekton POC - Test Results Dashboard</h1>
                <p>Python pytest CI/CD Pipeline Results</p>
            </div>
            
            <div class="container">
                <div class="pipeline-grid" id="pipeline-list">
                    <!-- Pipeline cards will be inserted here -->
                    <div class="no-pipelines">
                        🔄 Loading pipeline results...
                        <br><br>
                        If no results appear, check individual pipeline directories below.
                    </div>
                </div>
                
                <div class="refresh-note">
                    <p>📱 <strong>Quick Access:</strong></p>
                    <p>🏠 <a href="http://tekton.10.117.3.193.nip.io">Tekton Dashboard</a> | 
                       📊 <a href="http://tekton.10.117.3.193.nip.io/artifacts/">Test Artifacts</a> |
                       📱 <a href="https://github.com/johnnynv/tekton-poc">GitHub Repository</a></p>
                    <p><em>Access: tekton.10.117.3.193.nip.io/artifacts/</em></p>
                </div>
            </div>
        </body>
        </html>
        MAIN_EOF
        
        echo "✅ Reports uploaded successfully!"
        echo "🌐 Main Dashboard: http://tekton.10.117.3.193.nip.io/artifacts/"
        echo "🎯 This Pipeline: http://tekton.10.117.3.193.nip.io/artifacts/$PIPELINE_DIR/"
        echo "📊 Statistics: $PASSED_TESTS tests passed, $COVERAGE_PERCENT coverage"
        echo "📋 Uploaded files:"
        ls -la "$TARGET_DIR"
      volumeMounts:
        - name: shared-reports
          mountPath: /shared-reports
  volumes:
    - name: shared-reports
      persistentVolumeClaim:
        claimName: test-reports-pvc
