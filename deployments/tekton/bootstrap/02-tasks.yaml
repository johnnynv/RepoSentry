# Generated by RepoSentry
# File: 02-tasks.yaml
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-clone
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Clone user repository for Bootstrap Pipeline"
  params:
  - name: url
    type: string
    description: "Repository URL to clone"
  - name: revision
    type: string
    description: "Git revision to checkout"
    default: "main"
  workspaces:
  - name: output
    description: "The workspace where the repo will be cloned"
  steps:
  - name: clone
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2
    script: |
      set -e
      git clone "$(params.url)" "$(workspaces.output.path)/"
      cd "$(workspaces.output.path)/"
      git checkout "$(params.revision)"
      echo "Repository cloned successfully"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-compute-namespace
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Compute target namespace name from repository URL"
  params:
  - name: repo-url
    type: string
    description: "Repository URL"
  results:
  - name: namespace-name
    description: "Computed namespace name"
  steps:
  - name: compute
    image: bitnami/kubectl:1.28
    script: |
      set -e
      REPO_URL="$(params.repo-url)"
      # Extract owner/repo from URL and create hash
      REPO_PATH=$(echo "$REPO_URL" | sed -E 's#.*[:/]([^/]+/[^/]+)\.git$#\1#' | tr '/' '-')
      REPO_HASH=$(echo "$REPO_PATH" | sha256sum | cut -c1-8)
      NAMESPACE_NAME="reposentry-user-repo-$REPO_HASH"
      echo -n "$NAMESPACE_NAME" | tee $(results.namespace-name.path)
      echo "Computed namespace: $NAMESPACE_NAME"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-validate
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Validate Tekton resources in user repository"
  params:
  - name: tekton-path
    type: string
    description: "Path to Tekton resources"
    default: ".tekton"
  - name: target-namespace
    type: string
    description: "Target namespace for validation"
  workspaces:
  - name: source
    description: "Source code workspace"
  - name: output
    description: "Output workspace for processed resources"
  steps:
  - name: validate
    image: bitnami/kubectl:1.28
    script: |
      set -e
      TEKTON_PATH="$(workspaces.source.path)/$(params.tekton-path)"
      OUTPUT_PATH="$(workspaces.output.path)"
      
      if [ ! -d "$TEKTON_PATH" ]; then
        echo "No Tekton directory found at $TEKTON_PATH"
        exit 1
      fi
      
      echo "Validating Tekton resources in $TEKTON_PATH"
      
      # Copy and validate YAML files
      mkdir -p "$OUTPUT_PATH"
      find "$TEKTON_PATH" -name "*.yaml" -o -name "*.yml" | while read file; do
        echo "Validating $file"
        kubectl --dry-run=client apply -f "$file" --namespace="$(params.target-namespace)"
        cp "$file" "$OUTPUT_PATH/"
      done
      
      echo "Validation completed successfully"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-ensure-namespace
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Ensure user namespace exists with proper RBAC and quotas"
  params:
  - name: namespace-name
    type: string
    description: "Namespace name to create"
  - name: repo-url
    type: string
    description: "Repository URL for labeling"
  steps:
  - name: ensure-namespace
    image: bitnami/kubectl:1.28
    script: |
      set -e
      NAMESPACE="$(params.namespace-name)"
      REPO_URL="$(params.repo-url)"
      
      echo "Ensuring namespace $NAMESPACE exists"
      
      # Create namespace if it doesn't exist
      kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | \
        kubectl apply -f -
      
      # Label namespace
      kubectl label namespace "$NAMESPACE" \
        reposentry.io/managed=true \
        reposentry.io/repository="$REPO_URL" \
        --overwrite
      
      echo "Namespace $NAMESPACE is ready"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: reposentry-bootstrap-apply
  namespace: reposentry-system
  labels:
    reposentry.io/component: "bootstrap"
    reposentry.io/type: "task"
spec:
  description: "Apply user Tekton resources to target namespace"
  params:
  - name: target-namespace
    type: string
    description: "Target namespace for resources"
  workspaces:
  - name: resources
    description: "Validated Tekton resources workspace"
  steps:
  - name: apply
    image: bitnami/kubectl:1.28
    script: |
      set -e
      TARGET_NS="$(params.target-namespace)"
      RESOURCES_PATH="$(workspaces.resources.path)"
      
      echo "Applying Tekton resources to namespace $TARGET_NS"
      
      # Apply all YAML files to target namespace
      find "$RESOURCES_PATH" -name "*.yaml" -o -name "*.yml" | while read file; do
        echo "Applying $file"
        kubectl apply -f "$file" --namespace="$TARGET_NS"
      done
      
      echo "Resources applied successfully to $TARGET_NS"
---
