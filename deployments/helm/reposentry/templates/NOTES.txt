1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "reposentry.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "reposentry.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "reposentry.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "reposentry.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the health of RepoSentry:
   curl {{ if .Values.ingress.enabled }}{{ (index .Values.ingress.hosts 0).host }}{{ else }}http://localhost:8080{{ end }}/health

3. View application metrics:
   curl {{ if .Values.ingress.enabled }}{{ (index .Values.ingress.hosts 0).host }}{{ else }}http://localhost:8080{{ end }}/metrics

4. Check application status:
   curl {{ if .Values.ingress.enabled }}{{ (index .Values.ingress.hosts 0).host }}{{ else }}http://localhost:8080{{ end }}/status

5. Monitor logs:
   kubectl logs -f deployment/{{ include "reposentry.fullname" . }} -n {{ .Release.Namespace }}

6. Run tests:
   helm test {{ .Release.Name }} -n {{ .Release.Namespace }}

{{- if not .Values.config.tekton.eventListenerURL }}

‚ö†Ô∏è  WARNING: Tekton EventListener URL is not configured!
    RepoSentry will not be able to trigger webhooks without this.
    
    To configure it, update your values.yaml:
    
    config:
      tekton:
        eventListenerURL: "https://your-tekton-eventlistener-url"
    
    Then upgrade the release:
    helm upgrade {{ .Release.Name }} {{ .Chart.Name }} -f values.yaml
{{- end }}

{{- if not .Values.config.repositories }}

üìù Next Steps:
   1. Configure your repositories in values.yaml:
      
      config:
        repositories:
          - name: my-repo
            url: https://github.com/org/repo
            provider: github
            token: "${GITHUB_TOKEN}"
            branchRegex: "^(main|master)$"
   
   2. Set up your API tokens as secrets:
      
      secrets:
        data:
          GITHUB_TOKEN: "your_github_token"
          GITLAB_TOKEN: "your_gitlab_token"
   
   3. Upgrade the release:
      helm upgrade {{ .Release.Name }} {{ .Chart.Name }} -f values.yaml

{{- else }}

‚úÖ RepoSentry is configured with {{ len .Values.config.repositories }} repositories.
{{- end }}

For more information, visit: https://github.com/johnnynv/RepoSentry
